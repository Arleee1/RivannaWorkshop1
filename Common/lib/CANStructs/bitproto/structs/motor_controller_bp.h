// Code generated by bitproto. DO NOT EDIT.

#ifndef __BITPROTO__MOTOR_CONTROLLER_H__
#define __BITPROTO__MOTOR_CONTROLLER_H__ 1

#include <inttypes.h>
#include <stddef.h>
#include <stdint.h>
#ifndef __cplusplus
#include <stdbool.h>
#endif

#include "bitproto.h"

#if defined(__cplusplus)
extern "C" {
#endif

// Number of bytes to encode struct BitprotoMotorControllerFrameRequest
#define BYTES_LENGTH_BITPROTO_MOTOR_CONTROLLER_FRAME_REQUEST 1

struct BitprotoMotorControllerFrameRequest {
    bool frame0; // 1bit
    bool frame1; // 1bit
    bool frame2; // 1bit
};

// Number of bytes to encode struct BitprotoMotorControllerFrame0
#define BYTES_LENGTH_BITPROTO_MOTOR_CONTROLLER_FRAME0 8

struct BitprotoMotorControllerFrame0 {
    uint16_t battery_voltage; // 10bit
    uint16_t battery_current; // 9bit
    bool battery_current_direction; // 1bit
    uint16_t motor_current; // 10bit
    uint8_t fet_temperature; // 5bit
    uint16_t motor_rotating_speed; // 12bit
    uint16_t pwm_duty; // 10bit
    uint8_t advanced_lead_angle; // 7bit
};

// Number of bytes to encode struct BitprotoMotorControllerFrame1
#define BYTES_LENGTH_BITPROTO_MOTOR_CONTROLLER_FRAME1 5

struct BitprotoMotorControllerFrame1 {
    bool power_eco; // 1bit
    bool control_mode; // 1bit
    uint16_t acceleration_vr_position; // 10bit
    uint16_t regeneration_vr_position; // 10bit
    uint8_t digi_sw_number; // 4bit
    uint16_t target_value; // 10bit
    uint8_t motor_status; // 2bit
    bool drive_regen; // 1bit
};

// Number of bytes to encode struct BitprotoMotorControllerFrame2
#define BYTES_LENGTH_BITPROTO_MOTOR_CONTROLLER_FRAME2 4

struct BitprotoMotorControllerFrame2 {
    bool analog_sensor_error; // 1bit
    bool motor_current_sensor_u_error; // 1bit
    bool motor_current_sensor_w_error; // 1bit
    bool fet_thermistor_error; // 1bit
    uint8_t padding0; // 1bit
    bool battery_voltage_sensor_error; // 1bit
    bool battery_current_sensor_error; // 1bit
    bool battery_current_sensor_adjust_error; // 1bit
    bool motor_current_sensor_adjust_error; // 1bit
    bool accelerator_position_error; // 1bit
    uint8_t padding1; // 1bit
    bool controller_voltage_sensor_error; // 1bit
    uint8_t padding2; // 2bit
    bool power_system_error; // 1bit
    bool overcurrent_error; // 1bit
    uint8_t padding3; // 1bit
    bool overvoltage_error; // 1bit
    uint8_t padding4; // 1bit
    bool overcurrent_limit; // 1bit
    uint8_t padding5; // 2bit
    bool motor_system_error; // 1bit
    bool motor_lock; // 1bit
    bool hall_sensor_short; // 1bit
    bool hall_sensor_open; // 1bit
    uint8_t padding6; // 4bit
    uint8_t overheat_level; // 2bit
};

// Encode struct BitprotoMotorControllerFrameRequest to given buffer s.
int EncodeBitprotoMotorControllerFrameRequest(struct BitprotoMotorControllerFrameRequest *m, unsigned char *s);
// Decode struct BitprotoMotorControllerFrameRequest from given buffer s.
int DecodeBitprotoMotorControllerFrameRequest(struct BitprotoMotorControllerFrameRequest *m, unsigned char *s);
// Format struct BitprotoMotorControllerFrameRequest to a json format string.
int JsonBitprotoMotorControllerFrameRequest(struct BitprotoMotorControllerFrameRequest *m, char *s);

// Encode struct BitprotoMotorControllerFrame0 to given buffer s.
int EncodeBitprotoMotorControllerFrame0(struct BitprotoMotorControllerFrame0 *m, unsigned char *s);
// Decode struct BitprotoMotorControllerFrame0 from given buffer s.
int DecodeBitprotoMotorControllerFrame0(struct BitprotoMotorControllerFrame0 *m, unsigned char *s);
// Format struct BitprotoMotorControllerFrame0 to a json format string.
int JsonBitprotoMotorControllerFrame0(struct BitprotoMotorControllerFrame0 *m, char *s);

// Encode struct BitprotoMotorControllerFrame1 to given buffer s.
int EncodeBitprotoMotorControllerFrame1(struct BitprotoMotorControllerFrame1 *m, unsigned char *s);
// Decode struct BitprotoMotorControllerFrame1 from given buffer s.
int DecodeBitprotoMotorControllerFrame1(struct BitprotoMotorControllerFrame1 *m, unsigned char *s);
// Format struct BitprotoMotorControllerFrame1 to a json format string.
int JsonBitprotoMotorControllerFrame1(struct BitprotoMotorControllerFrame1 *m, char *s);

// Encode struct BitprotoMotorControllerFrame2 to given buffer s.
int EncodeBitprotoMotorControllerFrame2(struct BitprotoMotorControllerFrame2 *m, unsigned char *s);
// Decode struct BitprotoMotorControllerFrame2 from given buffer s.
int DecodeBitprotoMotorControllerFrame2(struct BitprotoMotorControllerFrame2 *m, unsigned char *s);
// Format struct BitprotoMotorControllerFrame2 to a json format string.
int JsonBitprotoMotorControllerFrame2(struct BitprotoMotorControllerFrame2 *m, char *s);

void BpXXXProcessBitprotoMotorControllerFrameRequest(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatBitprotoMotorControllerFrameRequest(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessBitprotoMotorControllerFrame0(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatBitprotoMotorControllerFrame0(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessBitprotoMotorControllerFrame1(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatBitprotoMotorControllerFrame1(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessBitprotoMotorControllerFrame2(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatBitprotoMotorControllerFrame2(void *data, struct BpJsonFormatContext *ctx);

#if defined(__cplusplus)
}
#endif

#endif