// Code generated by bitproto. DO NOT EDIT.

#ifndef __BITPROTO__BPS_H__
#define __BITPROTO__BPS_H__ 1

#include <inttypes.h>
#include <stddef.h>
#include <stdint.h>
#ifndef __cplusplus
#include <stdbool.h>
#endif

#include "bitproto.h"

#if defined(__cplusplus)
extern "C" {
#endif

// Number of bytes to encode struct BitprotoPackInformation
#define BYTES_LENGTH_BITPROTO_PACK_INFORMATION 8

struct BitprotoPackInformation {
    uint16_t pack_voltage; // 16bit
    uint16_t pack_current; // 16bit
    uint8_t pack_soc; // 8bit
    bool internal_communications_fault; // 1bit
    bool internal_conversion_fault; // 1bit
    bool weak_cell_fault; // 1bit
    bool low_cell_voltage_fault; // 1bit
    bool open_wiring_fault; // 1bit
    bool current_sensor_fault; // 1bit
    bool pack_voltage_sensor_fault; // 1bit
    bool weak_pack_fault; // 1bit
    bool voltage_redundancy_fault; // 1bit
    bool fan_monitor_fault; // 1bit
    bool thermistor_fault; // 1bit
    bool CANBUS_communications_fault; // 1bit
    bool always_on_supply_fault; // 1bit
    bool high_voltage_isolation_fault; // 1bit
    bool power_supply_12v_fault; // 1bit
    bool charge_limit_enforcement_fault; // 1bit
    bool discharge_limit_enforcement_fault; // 1bit
    bool charger_safety_relay_fault; // 1bit
    bool internal_memory_fault; // 1bit
    bool internal_thermistor_fault; // 1bit
    bool internal_logic_fault; // 1bit
    bool discharge_relay; // 1bit
    bool charge_relay; // 1bit
};

// Number of bytes to encode struct BitprotoCellVoltage
#define BYTES_LENGTH_BITPROTO_CELL_VOLTAGE 6

struct BitprotoCellVoltage {
    uint16_t low_cell_voltage; // 16bit
    uint8_t low_cell_voltage_id; // 8bit
    uint16_t high_cell_voltage; // 16bit
    uint8_t high_cell_voltage_id; // 8bit
};

// Number of bytes to encode struct BitprotoCellTemperature
#define BYTES_LENGTH_BITPROTO_CELL_TEMPERATURE 4

struct BitprotoCellTemperature {
    uint8_t low_temperature; // 8bit
    uint8_t low_thermistor_id; // 8bit
    uint8_t high_temperature; // 8bit
    uint8_t high_thermistor_id; // 8bit
};

// Encode struct BitprotoPackInformation to given buffer s.
int EncodeBitprotoPackInformation(struct BitprotoPackInformation *m, unsigned char *s);
// Decode struct BitprotoPackInformation from given buffer s.
int DecodeBitprotoPackInformation(struct BitprotoPackInformation *m, unsigned char *s);
// Format struct BitprotoPackInformation to a json format string.
int JsonBitprotoPackInformation(struct BitprotoPackInformation *m, char *s);

// Encode struct BitprotoCellVoltage to given buffer s.
int EncodeBitprotoCellVoltage(struct BitprotoCellVoltage *m, unsigned char *s);
// Decode struct BitprotoCellVoltage from given buffer s.
int DecodeBitprotoCellVoltage(struct BitprotoCellVoltage *m, unsigned char *s);
// Format struct BitprotoCellVoltage to a json format string.
int JsonBitprotoCellVoltage(struct BitprotoCellVoltage *m, char *s);

// Encode struct BitprotoCellTemperature to given buffer s.
int EncodeBitprotoCellTemperature(struct BitprotoCellTemperature *m, unsigned char *s);
// Decode struct BitprotoCellTemperature from given buffer s.
int DecodeBitprotoCellTemperature(struct BitprotoCellTemperature *m, unsigned char *s);
// Format struct BitprotoCellTemperature to a json format string.
int JsonBitprotoCellTemperature(struct BitprotoCellTemperature *m, char *s);

void BpXXXProcessBitprotoPackInformation(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatBitprotoPackInformation(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessBitprotoCellVoltage(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatBitprotoCellVoltage(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessBitprotoCellTemperature(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatBitprotoCellTemperature(void *data, struct BpJsonFormatContext *ctx);

#if defined(__cplusplus)
}
#endif

#endif